<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BarSoko POS - Firestore V16.4</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" xintegrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body { font-family: 'Inter', sans-serif; scroll-behavior: smooth; }
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.6); display: flex; justify-content: center; align-items: center; z-index: 1000; }
        .modal-content { background-color: #1f2937; padding: 2rem; border-radius: 0.5rem; width: 90%; max-width: 500px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
        .hidden { display: none; }
        
        /* Login Screen Styles */
        #login-screen {
            background: #111827; /* bg-gray-900 */
        }
        .login-card {
            background-color: #1f2937; /* bg-gray-800 */
            border: 1px solid #374151; /* border-gray-700 */
        }
        .login-tab {
            cursor: pointer;
            padding: 0.75rem 1rem;
            border-bottom: 3px solid transparent;
            color: #9ca3af; /* text-gray-400 */
            transition: all 0.2s ease-in-out;
        }
        .login-tab:hover {
            color: #f9fafb; /* text-gray-50 */
        }
        .login-tab.active {
            color: #3b82f6; /* text-blue-500 */
            border-bottom-color: #3b82f6;
            font-weight: 600;
        }
        .form-section {
            display: none;
        }
        .form-section.active {
            display: block;
        }

        /* General App Styles */
        #tabs { display: flex; flex-wrap: wrap; gap: 0.5rem; border-bottom: 1px solid #374151; }
        .tab-btn { padding: 0.5rem 1rem; border: none; background: none; cursor: pointer; font-weight: 500; color: #9ca3af; border-bottom: 2px solid transparent; transition: all 0.2s ease-in-out; }
        .tab-btn:hover { color: #f9fafb; }
        .tab-btn.active { border-bottom-color: #3b82f6; color: #3b82f6; font-weight: 600; }
        .category-btn.active { background-color: #2563eb; color: white; font-weight: 600; }
        .gemini-button { background: linear-gradient(90deg, #4f46e5, #c026d3); border: none; color: white; }
        .gemini-button:hover { background: linear-gradient(90deg, #4338ca, #a21caf); }
        
        @media print {
            body * { visibility: hidden; }
            #print-area, #print-area * { visibility: visible; }
            #print-area { display: block !important; position: absolute; left: 0; top: 0; width: 100%; }
            .modal-backdrop, #app, #login-screen { display: none !important; visibility: hidden !important; }
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">

    <!-- LOGIN SCREEN -->
    <div id="login-screen" class="min-h-screen flex flex-col md:flex-row items-center justify-center p-4 bg-gray-900 bg-cover bg-center" style="background-image: linear-gradient(rgba(17, 24, 39, 0.8), rgba(17, 24, 39, 0.95)), url('https://images.unsplash.com/photo-1514933651103-005eec06c04b?q=80&w=2574&auto=format&fit=crop');">
        <div class="w-full max-w-6xl mx-auto grid md:grid-cols-2 gap-16 items-center">
            <!-- Branding Section -->
            <div class="text-center md:text-left">
                <h1 class="text-5xl md:text-6xl font-extrabold text-white">
                    <i class="fas fa-wine-glass-alt text-blue-500"></i> BarSoko
                </h1>
                <p class="mt-4 text-xl md:text-2xl text-gray-300">The Smart Point of Sale for Modern Bars & Restaurants.</p>
                <div id="firestore-status" class="mt-4 text-center md:text-left text-sm font-semibold py-2 px-4 rounded-lg inline-block">Connecting...</div>
            </div>
            
            <!-- Login Card -->
            <div class="login-card w-full max-w-md p-8 rounded-xl shadow-2xl">
                <!-- Tabs -->
                <div class="flex border-b border-gray-700 mb-6">
                    <div id="admin-login-tab" class="login-tab active flex-1 text-center">Admin</div>
                    <div id="waiter-login-tab" class="login-tab flex-1 text-center">Waiter</div>
                </div>

                <!-- Admin Login Form -->
                <div id="admin-login-form-section" class="form-section active">
                    <form id="admin-login-form" class="space-y-6">
                        <div>
                            <label for="admin-email" class="block text-sm font-medium text-gray-300">Email Address</label>
                            <input type="email" id="admin-email" autocomplete="email" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="admin-password" class="block text-sm font-medium text-gray-300">Password</label>
                            <input type="password" id="admin-password" autocomplete="current-password" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <p id="admin-login-error" class="text-red-400 text-sm hidden"></p>
                        <button type="submit" class="w-full bg-blue-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition">Sign In as Admin</button>
                        <div class="text-sm text-center">
                            <a href="#" id="forgot-password-link" class="font-medium text-blue-400 hover:text-blue-300">Forgot password?</a>
                        </div>
                        <div id="create-admin-section" class="text-sm text-center hidden">
                            <p class="text-gray-400">First time setup?</p>
                            <a href="#" id="create-admin-link" class="font-medium text-green-400 hover:text-green-300">Create the First Admin Account</a>
                        </div>
                    </form>
                </div>

                <!-- Waiter Login Form -->
                <div id="waiter-login-form-section" class="form-section">
                    <form id="waiter-login-form" class="space-y-6">
                        <div>
                            <label for="waiter-username" class="block text-sm font-medium text-gray-300">Select Your Name</label>
                            <select id="waiter-username" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500"></select>
                        </div>
                        <div>
                            <label for="waiter-password" class="block text-sm font-medium text-gray-300">Password / PIN</label>
                            <input type="password" id="waiter-password" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <p id="waiter-login-error" class="text-red-400 text-sm hidden">Invalid name or password.</p>
                        <button type="submit" class="w-full bg-green-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-green-700 transition">Sign In as Waiter</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- Main App (Initially Hidden) -->
    <div id="app" class="max-w-7xl mx-auto p-4 hidden">
        <!-- Header -->
        <header class="bg-gray-800 rounded-lg shadow p-4 mb-4 flex flex-wrap justify-between items-center gap-4">
            <div>
                <h1 id="business-name-header" class="text-2xl font-bold text-gray-100">BarSoko POS</h1>
                <p id="user-info" class="text-sm text-gray-400">Welcome!</p>
            </div>
            <div class="flex items-center space-x-2 sm:space-x-4">
                 <div id="online-status-indicator" class="flex items-center space-x-2"></div>
                <button id="logout-btn" aria-label="Log out" class="bg-red-500 text-white px-4 py-2 rounded-lg shadow hover:bg-red-600 transition flex items-center space-x-2">
                    <i class="fas fa-sign-out-alt"></i>
                    <span class="hidden sm:inline">Logout</span>
                </button>
            </div>
        </header>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <div class="lg:col-span-2 space-y-4">
                <!-- Open Bills Section -->
                <div class="bg-gray-800 rounded-lg shadow p-6">
                    <h2 class="text-xl font-semibold mb-4 text-gray-100">Open Bills</h2>
                    <div id="open-bills-container" class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-3"></div>
                </div>

                <!-- Point of Sale Section -->
                <div class="bg-gray-800 rounded-lg shadow p-6">
                    <div class="flex justify-between items-center mb-4">
                         <h2 class="text-xl font-semibold text-gray-100">Point of Sale</h2>
                         <div id="current-bill-info" class="text-lg font-bold text-blue-400"></div>
                    </div>
                    <div id="product-categories" class="flex flex-wrap gap-2 mb-4"></div>
                    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4" id="product-grid" role="grid"></div>
                    <hr class="my-6 border-gray-700">
                    <h3 class="text-lg font-semibold mb-4 text-gray-100">Current Order</h3>
                    <div id="cart" class="space-y-2"></div>
                    <div id="cart-summary" class="mt-6 pt-4 border-t-2 border-dashed border-gray-700">
                        <div class="flex justify-between items-center text-2xl font-bold">
                            <span id="total-label">Total:</span><span id="cart-total">Ksh 0.00</span>
                        </div>
                        <div class="mt-4 grid grid-cols-2 lg:grid-cols-4 gap-4">
                            <button id="save-bill-btn" class="bg-orange-500 text-white py-3 rounded-lg text-lg font-semibold hover:bg-orange-600 transition disabled:bg-gray-400" disabled><i class="fas fa-save mr-2"></i>Save</button>
                            <button id="pay-cash-btn" class="bg-green-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-green-700 transition disabled:bg-gray-400" disabled><i class="fas fa-money-bill-wave mr-2"></i>Cash</button>
                            <button id="pay-mpesa-btn" class="bg-emerald-500 text-white py-3 rounded-lg text-lg font-semibold hover:bg-emerald-600 transition disabled:bg-gray-400 flex items-center justify-center" disabled><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/M-PESA_LOGO-01.svg/1280px-M-PESA_LOGO-01.svg.png" class="h-5 mr-2" alt="M-PESA"> M-Pesa</button>
                            <button id="pay-card-btn" class="bg-blue-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition disabled:bg-gray-400" disabled><i class="fas fa-credit-card mr-2"></i>Card</button>
                        </div>
                        <div class="mt-2 grid grid-cols-2 gap-4">
                            <button id="clear-cart-btn" class="w-full bg-red-500 text-white py-2 rounded-lg hover:bg-red-600 transition disabled:bg-gray-400" disabled>Clear/Close Bill</button>
                            <button id="print-bill-btn" class="w-full bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition disabled:bg-gray-400" disabled><i class="fas fa-print mr-2"></i>Print Bill</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Management Tabs -->
            <div class="bg-gray-800 rounded-lg shadow p-6">
                <!-- Shift Management Panel -->
                <div id="shift-management-panel" class="bg-gray-700 p-4 rounded-lg mb-6"></div>
                <div class="mb-6">
                    <nav id="tabs" role="tablist"></nav>
                </div>
                <!-- Tab Content Panels -->
                <div id="tab-content-dashboard" role="tabpanel" class="mt-6 hidden"></div>
                <div id="tab-content-products" role="tabpanel" class="mt-6 hidden">
                    <form id="add-product-form" class="space-y-4">
                        <div><label for="product-name" class="block text-sm font-medium text-gray-300">Product Name</label><input type="text" id="product-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required></div>
                        <div><label for="product-price" class="block text-sm font-medium text-gray-300">Price (Ksh)</label><input type="number" id="product-price" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required min="0"></div>
                        <div>
                            <label for="product-category" class="block text-sm font-medium text-gray-300">Category</label>
                            <select id="product-category" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600"></select>
                        </div>
                        <div><label for="product-stock" class="block text-sm font-medium text-gray-300">Initial Stock</label><input type="number" id="product-stock" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required min="0"></div>
                        <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition">Add Product</button>
                    </form>
                    <hr class="my-6 border-gray-600">
                    <h3 class="font-semibold text-gray-200 mb-2">Existing Products</h3>
                    <div id="product-list-management" class="space-y-2"></div>
                </div>
                <div id="tab-content-my-sales" role="tabpanel" class="mt-6 hidden"></div>
                <div id="tab-content-all-sales" role="tabpanel" class="mt-6 hidden"></div>
                <div id="tab-content-waiters" role="tabpanel" class="mt-6 hidden">
                    <button id="add-user-btn" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition">Add New Waiter</button>
                    <hr class="my-6 border-gray-600">
                    <div id="user-list-management" class="space-y-2"></div>
                </div>
                 <div id="tab-content-categories" role="tabpanel" class="mt-6 hidden">
                    <form id="add-category-form" class="space-y-4">
                        <div><label for="category-name" class="block text-sm font-medium text-gray-300">New Category Name</label><input type="text" id="category-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required></div>
                        <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition">Add Category</button>
                    </form>
                    <hr class="my-6 border-gray-600">
                    <h3 class="font-semibold text-gray-200 mb-2">Existing Categories</h3>
                    <div id="category-list-management" class="space-y-2"></div>
                </div>
                <div id="tab-content-settings" role="tabpanel" class="mt-6 hidden">
                    <div class="space-y-6">
                        <!-- Security Section -->
                        <div id="security-settings-section">
                            <h3 class="text-lg font-semibold text-gray-200 mb-3 border-b border-gray-700 pb-2">Security</h3>
                            <button id="change-my-password-btn" class="w-full bg-gray-700 text-white py-2 rounded-lg shadow hover:bg-gray-600 transition">Change My Password</button>
                        </div>

                        <!-- Business Setup Section -->
                        <div id="business-settings-section">
                            <h3 class="text-lg font-semibold text-gray-200 mb-3 border-b border-gray-700 pb-2">Business Setup</h3>
                            <div class="space-y-4">
                                <div>
                                    <label for="business-name" class="block text-sm font-medium text-gray-300">Business Name</label>
                                    <input type="text" id="business-name" placeholder="e.g., The Watering Hole" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md">
                                </div>
                                <div>
                                    <label for="mpesa-till" class="block text-sm font-medium text-gray-300">M-PESA Till Number</label>
                                    <input type="text" id="mpesa-till" placeholder="e.g., 123456" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md">
                                    <p id="till-error" class="text-red-500 text-sm mt-1 hidden"></p>
                                </div>
                                <button id="save-settings-btn" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition mt-2">Save Settings</button>
                            </div>
                        </div>
                        
                        <!-- Data Management Section -->
                        <div id="data-management-section">
                            <h3 class="text-lg font-semibold text-red-400 mb-3 border-b border-red-800 pb-2">Danger Zone</h3>
                            <p class="text-sm text-gray-400 mb-3">These actions are permanent and cannot be undone. They will affect all users.</p>
                            <button id="clear-transactions-btn" class="w-full bg-red-800 text-white py-2 rounded-lg shadow hover:bg-red-900 transition">Clear All Sales Data</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- General Purpose Modal -->
    <div id="modal" class="modal-backdrop hidden" role="dialog" aria-modal="true" aria-labelledby="modal-title">
        <div class="modal-content">
            <h2 id="modal-title" class="text-xl font-bold mb-4 text-gray-100">Modal Title</h2>
            <div id="modal-body"><p>Modal content goes here.</p></div>
            <div id="modal-footer" class="mt-6 flex justify-end space-x-4">
                <button id="modal-close-btn" class="bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-500">Close</button>
                <button id="modal-confirm-btn" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Confirm</button>
            </div>
        </div>
    </div>
    
    <!-- Print Preview Modal -->
    <div id="print-preview-modal" class="modal-backdrop hidden">
        <div class="modal-content">
            <h2 class="text-xl font-bold mb-4 text-gray-100">Print Preview</h2>
            <div id="print-preview-area" class="bg-white p-4 border rounded-md overflow-y-auto max-h-96">
                <!-- Receipt content will be injected here -->
            </div>
            <div class="mt-6 flex justify-end space-x-4">
                <button id="print-preview-close" class="bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-500">Cancel</button>
                <button id="print-preview-copy" class="bg-yellow-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-yellow-600">Print Copy</button>
                <button id="print-preview-final" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Print Original</button>
            </div>
        </div>
    </div>

    <!-- Hidden Print Area -->
    <div id="print-area" class="hidden"></div>

    <!-- Firebase SDK -->
    <script type="module">
        // This is the main entry point of the application.
        // All JavaScript logic is contained within this single module.

        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, writeBatch, query, where, serverTimestamp, enableMultiTabIndexedDbPersistence } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js";
        
        // --- CONFIGURATION ---
        const firebaseConfig = {
            apiKey: "AIzaSyDcLP_igZJ3Sz0CDqBu6r0O4Fb9hn6aF9c",
            authDomain: "barsoko-e99f1.firebaseapp.com",
            projectId: "barsoko-e99f1",
            storageBucket: "barsoko-e99f1.appspot.com",
            messagingSenderId: "205771329503",
            appId: "1:205771329503:web:611f442545876024693e6a"
        };
        
        // --- INITIALIZATION ---
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- GLOBAL STATE ---
        window.state = {
            products: [],
            sales: [],
            openBills: [],
            settings: { businessName: 'BarSoko POS', mpesaTill: '' },
            users: [],
            categories: [],
            shifts: [],
            currentUser: null,
            currentBillId: null,
            cart: [],
        };

        // --- DOM ELEMENTS ---
        const loginScreen = document.getElementById('login-screen');
        const appDiv = document.getElementById('app');
        
        const adminLoginTab = document.getElementById('admin-login-tab');
        const waiterLoginTab = document.getElementById('waiter-login-tab');
        const adminLoginFormSection = document.getElementById('admin-login-form-section');
        const waiterLoginFormSection = document.getElementById('waiter-login-form-section');
        
        const adminLoginForm = document.getElementById('admin-login-form');
        const waiterLoginForm = document.getElementById('waiter-login-form');
        const forgotPasswordLink = document.getElementById('forgot-password-link');
        const createAdminLink = document.getElementById('create-admin-link');
        
        const logoutBtn = document.getElementById('logout-btn');
        const firestoreStatusDiv = document.getElementById('firestore-status');
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');
        const modalFooter = document.getElementById('modal-footer');
        const userInfo = document.getElementById('user-info');
        const businessNameHeader = document.getElementById('business-name-header');
        const onlineStatusIndicator = document.getElementById('online-status-indicator');
        const openBillsContainer = document.getElementById('open-bills-container');
        const productCategoriesNav = document.getElementById('product-categories');
        const productGrid = document.getElementById('product-grid');
        const cartDiv = document.getElementById('cart');
        const cartTotalSpan = document.getElementById('cart-total');
        const currentBillInfo = document.getElementById('current-bill-info');
        const payCashBtn = document.getElementById('pay-cash-btn');
        const payMpesaBtn = document.getElementById('pay-mpesa-btn');
        const payCardBtn = document.getElementById('pay-card-btn');
        const saveBillBtn = document.getElementById('save-bill-btn');
        const clearCartBtn = document.getElementById('clear-cart-btn');
        const printBillBtn = document.getElementById('print-bill-btn');
        const shiftManagementPanel = document.getElementById('shift-management-panel');
        const tabsContainer = document.getElementById('tabs');
        const tabContents = {
            dashboard: document.getElementById('tab-content-dashboard'),
            products: document.getElementById('tab-content-products'),
            'my-sales': document.getElementById('tab-content-my-sales'),
            'all-sales': document.getElementById('tab-content-all-sales'),
            waiters: document.getElementById('tab-content-waiters'),
            categories: document.getElementById('tab-content-categories'),
            settings: document.getElementById('tab-content-settings'),
        };
        const productListManagement = document.getElementById('product-list-management');
        const userListManagement = document.getElementById('user-list-management');
        const categoryListManagement = document.getElementById('category-list-management');
        const printPreviewModal = document.getElementById('print-preview-modal');
        const printPreviewArea = document.getElementById('print-preview-area');
        const printArea = document.getElementById('print-area');

        // --- AUTHENTICATION & LOGIN LOGIC ---

        function listenForAuthChanges(auth, db) {
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    // Admin user is signed in via Firebase Auth
                    console.log("Firebase Auth user signed in:", user.uid);
                    const userDocRef = doc(db, "users", user.uid);
                    const userDoc = await getDoc(userDocRef);

                    if (userDoc.exists() && userDoc.data().role === 'admin') {
                        loginUser({ uid: user.uid, ...userDoc.data() }, db);
                    } else {
                        console.error("User exists in Auth but is not a valid admin in Firestore. Logging out.");
                        handleLogout(auth);
                    }
                } else {
                    // No Firebase Auth user is signed in.
                    if (window.state.currentUser) {
                         console.log("User logged out.");
                         window.state.currentUser = null;
                         stopAllListeners();
                         hideApp();
                    }
                }
            });
        }
        
        function loginUser(userObject, db) {
            window.state.currentUser = userObject;
            console.log("User profile loaded:", window.state.currentUser);
            
            listenToAllData(db);
            showApp();
            setupAppEventListeners(auth, db);
        }

        async function handleAdminLogin(e, auth) {
            e.preventDefault();
            const email = document.getElementById('admin-email').value;
            const password = document.getElementById('admin-password').value;
            const errorP = document.getElementById('admin-login-error');
            errorP.classList.add('hidden');

            try {
                await signInWithEmailAndPassword(auth, email, password);
            } catch (error) {
                console.error("Admin Login failed:", error.code);
                errorP.textContent = getAuthErrorMessage(error.code);
                errorP.classList.remove('hidden');
            }
        }

        function handleWaiterLogin(e, db) {
            e.preventDefault();
            const userId = document.getElementById('waiter-username').value;
            const password = document.getElementById('waiter-password').value.trim();
            const errorP = document.getElementById('waiter-login-error');
            errorP.classList.add('hidden');

            const user = window.state.users.find(u => u.id === userId);

            if (user && user.password === password) {
                console.log("Waiter login successful:", user.name);
                loginUser(user, db);
            } else {
                errorP.classList.remove('hidden');
            }
        }

        function handleLogout(auth) {
            signOut(auth).catch(error => console.error("Logout failed:", error));
            
            if (window.state.currentUser && window.state.currentUser.role === 'waiter') {
                 console.log("Waiter logged out.");
                 window.state.currentUser = null;
                 stopAllListeners();
                 hideApp();
            }
        }

        function handleForgotPassword(e, auth) {
            e.preventDefault();
            const content = `<div><label for="reset-email-input" class="block text-sm font-medium text-gray-300">Enter your admin email address</label><input type="email" id="reset-email-input" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required></div>`;
            showModal('Reset Password', content, () => {
                const email = document.getElementById('reset-email-input').value;
                if (!email) return false;

                sendPasswordResetEmail(auth, email)
                    .then(() => {
                        showModal('Check Your Email', `A password reset link has been sent to ${email}.`, () => true, false);
                    })
                    .catch((error) => {
                        showModal('Error', `Could not send reset email. ${getAuthErrorMessage(error.code)}`, () => true, false);
                    });
                return true;
            });
        }

        function handleCreateAdminAccount(e, auth, db) {
            e.preventDefault();
            const content = `<div><label for="new-admin-name" class="block text-sm font-medium text-gray-300">Full Name</label><input type="text" id="new-admin-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required></div><div class="mt-2"><label for="new-admin-email" class="block text-sm font-medium text-gray-300">Email Address</label><input type="email" id="new-admin-email" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required></div><div class="mt-2"><label for="new-admin-password" class="block text-sm font-medium text-gray-300">Password (min. 6 characters)</label><input type="password" id="new-admin-password" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" required></div>`;
            showModal('Create First Admin Account', content, async () => {
                const name = document.getElementById('new-admin-name').value;
                const email = document.getElementById('new-admin-email').value;
                const password = document.getElementById('new-admin-password').value;

                if (!name || !email || password.length < 6) {
                    alert("Please fill all fields correctly.");
                    return false;
                }

                try {
                    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                    const user = userCredential.user;

                    const userProfile = {
                        name: name,
                        email: email,
                        role: 'admin',
                        createdAt: new Date().toISOString()
                    };
                    await setDoc(doc(db, "users", user.uid), userProfile);
                    await setDoc(doc(db, "app_settings", "config"), { adminCreated: true }, { merge: true });
                    await setupInitialData(db);
                    showModal('Success', 'Admin account created and initial data loaded. You can now log in.', () => true, false);
                    return true;
                } catch (error) {
                    showModal('Error', getAuthErrorMessage(error.code), () => true, false);
                    return false;
                }
            });
        }

        function getAuthErrorMessage(errorCode) {
            switch (errorCode) {
                case 'auth/user-not-found':
                case 'auth/wrong-password':
                    return 'Invalid email or password.';
                case 'auth/invalid-email':
                    return 'Please enter a valid email address.';
                case 'auth/email-already-in-use':
                    return 'This email address is already in use.';
                case 'auth/weak-password':
                    return 'The password is too weak. It must be at least 6 characters.';
                default:
                    return 'An unexpected error occurred. Please try again.';
            }
        }

        // --- FIRESTORE SERVICE LOGIC ---
        
        let unsubscribes = [];

        function stopAllListeners() {
            unsubscribes.forEach(unsub => unsub());
            unsubscribes = [];
            console.log("All Firestore listeners stopped.");
        }

        function listenToAllData(db) {
            console.log("Starting Firestore listeners...");
            stopAllListeners();

            const settingsUnsub = onSnapshot(doc(db, "app_settings", "config"), (doc) => {
                window.state.settings = doc.data() || { businessName: 'BarSoko POS', mpesaTill: '' };
                renderAllUI();
            });
            unsubscribes.push(settingsUnsub);

            const productsUnsub = onSnapshot(collection(db, "products"), (snapshot) => {
                window.state.products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            });
            unsubscribes.push(productsUnsub);

            const categoriesUnsub = onSnapshot(collection(db, "categories"), (snapshot) => {
                console.log("Firestore: Categories updated."); // <-- DEBUG
                window.state.categories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })).sort((a, b) => a.name.localeCompare(b.name));
                renderAllUI();
            });
            unsubscribes.push(categoriesUnsub);
            
            const openBillsUnsub = onSnapshot(collection(db, "openBills"), (snapshot) => {
                window.state.openBills = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            });
            unsubscribes.push(openBillsUnsub);

            const shiftsUnsub = onSnapshot(collection(db, "shifts"), (snapshot) => {
                window.state.shifts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            });
            unsubscribes.push(shiftsUnsub);

            const usersUnsub = onSnapshot(collection(db, "users"), (snapshot) => {
                window.state.users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                populateWaiterSelect();
                renderAllUI();
            });
            unsubscribes.push(usersUnsub);

            if (window.state.currentUser.role === 'admin') {
                const salesUnsub = onSnapshot(collection(db, "sales"), (snapshot) => {
                    window.state.sales = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    renderAllUI();
                });
                unsubscribes.push(salesUnsub);
            } else { 
                const waiterId = window.state.currentUser.uid || window.state.currentUser.id;
                const q = query(collection(db, "sales"), where("waiterId", "==", waiterId));
                const salesUnsub = onSnapshot(q, (snapshot) => {
                    window.state.sales = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    renderAllUI();
                });
                unsubscribes.push(salesUnsub);
            }
        }

        async function setupInitialData(db) {
            console.log("Setting up initial database data...");
            const batch = writeBatch(db);

            const categories = ['Beers', 'Ciders', 'Spirits', 'Wines', 'Soft Drinks', 'Other'];
            categories.forEach(name => {
                const catRef = doc(collection(db, "categories"));
                batch.set(catRef, { name });
            });

            const products = [
                { name: 'Tusker Lager', price: 300, stock: 120, category: 'Beers', isFavorite: true },
                { name: 'Guinness', price: 350, stock: 96, category: 'Beers', isFavorite: true },
                { name: 'Gilbeys Gin (Tot)', price: 150, stock: 500, category: 'Spirits', isFavorite: true },
                { name: 'Coca-Cola', price: 100, stock: 200, category: 'Soft Drinks', isFavorite: true },
            ];
            products.forEach(p => {
                const prodRef = doc(collection(db, "products"));
                batch.set(prodRef, p);
            });
            
            const settingsRef = doc(db, "app_settings", "config");
            batch.set(settingsRef, { businessName: 'BarSoko POS', mpesaTill: '' }, { merge: true });

            await batch.commit();
            console.log("Initial data setup complete.");
        }

        // --- UI & EVENT HANDLER LOGIC ---
        
        function showApp() {
            loginScreen.style.display = 'none';
            appDiv.classList.remove('hidden');
        }

        function hideApp() {
            loginScreen.style.display = 'flex';
            appDiv.classList.add('hidden');
        }

        function showModal(title, content, onConfirm, showConfirm = true) {
            modalTitle.textContent = title;
            modalBody.innerHTML = content;
            
            modalFooter.innerHTML = `
                <button id="modal-close-btn-dynamic" class="bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-500">Close</button>
                <button id="modal-confirm-btn-dynamic" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Confirm</button>
            `;
            
            const newConfirmBtn = document.getElementById('modal-confirm-btn-dynamic');
            const newCloseBtn = document.getElementById('modal-close-btn-dynamic');

            newConfirmBtn.classList.toggle('hidden', !showConfirm);
            newConfirmBtn.onclick = () => { if(onConfirm()) { hideModal(); } };
            newCloseBtn.onclick = hideModal;

            modal.classList.remove('hidden');
        }
        function hideModal() { modal.classList.add('hidden'); }
        
        function renderAllUI() {
            if (!window.state.currentUser) return;
            
            userInfo.textContent = `User: ${window.state.currentUser.name} (${window.state.currentUser.role})`;
            businessNameHeader.textContent = window.state.settings.businessName || 'BarSoko POS';
            updateOnlineStatus();

            renderTabs();
            renderDashboard();
            renderOpenBills();
            renderProductCategoriesNav();
            renderProductsGrid(document.querySelector('.category-btn.active')?.dataset.category || 'Favorites');
            renderCart();
            renderShiftControls();
            
            renderProductListManagement();
            renderCategoryManagement();
            renderUserListManagement();
            renderSalesHistory(true);
            renderSalesHistory(false);
            renderSettings();

            const activeTabKey = tabsContainer.querySelector('button.active')?.dataset.tab;
            if (activeTabKey && tabContents[activeTabKey]) {
                 tabContents[activeTabKey].classList.remove('hidden');
            } else {
                const firstTab = tabsContainer.querySelector('button');
                if (firstTab) {
                    firstTab.classList.add('active');
                    tabContents[firstTab.dataset.tab].classList.remove('hidden');
                }
            }
        }

        function renderTabs() {
            const activeTabKey = tabsContainer.querySelector('button.active')?.dataset.tab;

            tabsContainer.innerHTML = '';
            const allTabs = [
                { key: 'dashboard', label: 'Dashboard', adminOnly: true },
                { key: 'products', label: 'Products', adminOnly: true },
                { key: 'my-sales', label: 'My Sales', adminOnly: false },
                { key: 'all-sales', label: 'All Sales', adminOnly: true },
                { key: 'waiters', label: 'Staff', adminOnly: true },
                { key: 'categories', label: 'Categories', adminOnly: true },
                { key: 'settings', label: 'Settings', adminOnly: false },
            ];

            const visibleTabs = allTabs.filter(tab => !tab.adminOnly || window.state.currentUser.role === 'admin');
            visibleTabs.forEach((tab) => {
                const button = document.createElement('button');
                button.setAttribute('role', 'tab');
                button.dataset.tab = tab.key;
                button.className = `tab-btn`;
                button.textContent = tab.label;
                if (tab.key === activeTabKey) {
                    button.classList.add('active');
                }
                tabsContainer.appendChild(button);
            });
        }

        function renderDashboard() {
            if (window.state.currentUser.role !== 'admin' || !tabContents.dashboard) return;
            
            const activeShifts = window.state.shifts.filter(s => !s.end);
            const activeWaitersHtml = activeShifts.length > 0
                ? activeShifts.map(s => `<li>${s.waiterName} (since ${new Date(s.start).toLocaleTimeString()})</li>`).join('')
                : '<li>No staff currently on shift.</li>';

            const today = new Date().toISOString().slice(0, 10);
            const todaysSales = window.state.sales.filter(s => new Date(s.date.seconds * 1000).toISOString().startsWith(today));
            const totalSales = todaysSales.reduce((sum, s) => sum + s.total, 0);

            const salesByWaiter = todaysSales.reduce((acc, sale) => {
                acc[sale.waiterName] = (acc[sale.waiterName] || 0) + sale.total;
                return acc;
            }, {});
            const salesByWaiterHtml = Object.entries(salesByWaiter).length > 0
                ? Object.entries(salesByWaiter).map(([name, total]) => `<li>${name}: Ksh ${total.toFixed(2)}</li>`).join('')
                : '<li>No sales yet today.</li>';

            tabContents.dashboard.innerHTML = `<div class="space-y-4">
                <div class="bg-gray-700 p-4 rounded-lg"><h3 class="font-semibold text-blue-300">Active Staff</h3><ul class="list-disc list-inside text-sm text-blue-400">${activeWaitersHtml}</ul></div>
                <div class="bg-gray-700 p-4 rounded-lg"><h3 class="font-semibold text-gray-200">Today's Total Sales</h3><p class="text-3xl font-bold text-green-400">Ksh ${totalSales.toFixed(2)}</p></div>
                <div class="bg-gray-700 p-4 rounded-lg"><h3 class="font-semibold text-gray-200">Sales by Staff (Live)</h3><ul class="list-disc list-inside text-sm text-gray-300">${salesByWaiterHtml}</ul></div>
            </div>`;
        }
        
        function renderOpenBills() {
            const billsToShow = window.state.currentUser.role === 'admin'
                ? window.state.openBills
                : window.state.openBills.filter(b => b.waiterId === window.state.currentUser.uid || b.waiterId === window.state.currentUser.id);

            openBillsContainer.innerHTML = '';
            const newBillButton = document.createElement('button');
            newBillButton.className = 'border-2 border-dashed border-gray-600 rounded-lg p-4 text-center text-gray-400 hover:bg-gray-700 hover:border-gray-500 transition';
            newBillButton.innerHTML = `<i class="fas fa-plus text-2xl"></i><p class="font-semibold mt-1">New Bill</p>`;
            newBillButton.id = 'new-bill-btn';
            openBillsContainer.appendChild(newBillButton);

            billsToShow.forEach(bill => {
                const billButton = document.createElement('button');
                const isSelected = window.state.currentBillId === bill.id;
                billButton.className = `border rounded-lg p-4 text-center cursor-pointer transition relative ${isSelected ? 'bg-blue-600 text-white border-blue-600' : 'bg-gray-700 border-gray-600 hover:border-blue-400'}`;
                
                const waiterNameHtml = window.state.currentUser.role === 'admin' ? `<p class="text-xs opacity-70">${bill.waiterName}</p>` : '';
                const total = bill.items.reduce((t, i) => t + (i.price * i.quantity), 0);
                
                const billNameP = document.createElement('p');
                billNameP.className = 'font-bold text-lg';
                billNameP.textContent = bill.name;

                billButton.innerHTML = `<span class="absolute top-1 right-1 text-xs bg-red-500 text-white font-semibold px-2 py-0.5 rounded-full">Unpaid</span>`;
                billButton.appendChild(billNameP);
                billButton.innerHTML += `<p class="text-sm">Ksh ${total.toFixed(2)}</p>${waiterNameHtml}`;
                
                billButton.dataset.billId = bill.id;
                billButton.classList.add('open-bill-btn');
                openBillsContainer.appendChild(billButton);
            });
        }

        function renderProductCategoriesNav() {
            const activeCategory = document.querySelector('.category-btn.active')?.dataset.category || 'Favorites';
            const categories = ['Favorites', 'All', ...window.state.categories.map(c => c.name)];
            productCategoriesNav.innerHTML = categories.map(cat => 
                `<button data-category="${cat}" class="category-btn px-3 py-1 border rounded-full text-sm border-gray-600 ${cat === activeCategory ? 'active' : ''}">${cat === 'Favorites' ? '⭐ ' : ''}${cat}</button>`
            ).join('');
        }

        function renderProductsGrid(category = 'Favorites') {
            let productsToShow = window.state.products;
            if (category === 'Favorites') {
                productsToShow = window.state.products.filter(p => p.isFavorite);
            } else if (category !== 'All') {
                productsToShow = window.state.products.filter(p => p.category === category);
            }
            productGrid.innerHTML = '';
            if (productsToShow.length === 0) {
                productGrid.innerHTML = `<p class="text-gray-400 col-span-full">No products in this category.</p>`;
                return;
            }
            productsToShow.forEach(p => {
                const disabled = p.stock <= 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-700 hover:border-blue-500';
                const stockInfo = p.stock <= 0 ? '<span class="text-red-500 font-bold">Out of Stock</span>' : `<span class="text-gray-400">${p.stock} in stock</span>`;
                
                const productCard = document.createElement('div');
                productCard.className = `product-card border rounded-lg p-4 text-center cursor-pointer transition border-gray-700 bg-gray-800 ${disabled}`;
                productCard.setAttribute('role', 'gridcell');
                productCard.setAttribute('tabindex', p.stock > 0 ? '0' : '-1');
                
                const nameH4 = document.createElement('h4');
                nameH4.className = 'font-semibold text-gray-100';
                nameH4.textContent = p.name;
                
                productCard.appendChild(nameH4);
                productCard.innerHTML += `<p class="text-lg font-bold text-blue-400">Ksh ${p.price.toFixed(2)}</p><p class="text-xs">${stockInfo}</p>`;
                
                if (p.stock > 0) {
                    productCard.dataset.productId = p.id;
                }
                productGrid.appendChild(productCard);
            });
        }
        
        function renderCart() {
            cartDiv.innerHTML = '';
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const enableBtns = total > 0;

            if (window.state.cart.length === 0) {
                cartDiv.innerHTML = `<p class="text-gray-400">Your cart is empty.</p>`;
            } else {
                window.state.cart.forEach(item => {
                    const cartItemDiv = document.createElement('div');
                    cartItemDiv.className = 'flex justify-between items-center bg-gray-700 p-2 rounded-md';
                    
                    const nameP = document.createElement('p');
                    nameP.className = 'font-medium';
                    nameP.textContent = item.name;

                    cartItemDiv.innerHTML = `<div></div><div class="flex items-center space-x-3">
                        <button data-id="${item.productId}" data-action="decrease-qty" aria-label="Decrease quantity of ${item.name}" class="bg-gray-600 w-6 h-6 rounded-full">-</button>
                        <span class="font-bold">${item.quantity}</span>
                        <button data-id="${item.productId}" data-action="increase-qty" aria-label="Increase quantity of ${item.name}" class="bg-gray-600 w-6 h-6 rounded-full">+</button>
                    </div>`;
                    cartItemDiv.firstChild.appendChild(nameP);
                    cartItemDiv.firstChild.innerHTML += `<p class="text-sm text-gray-400">Ksh ${item.price.toFixed(2)}</p>`;
                    
                    cartDiv.appendChild(cartItemDiv);
                });
            }
            cartTotalSpan.textContent = `Ksh ${total.toFixed(2)}`;
            payCashBtn.disabled = !enableBtns;
            payMpesaBtn.disabled = !enableBtns;
            payCardBtn.disabled = !enableBtns;
            saveBillBtn.disabled = !enableBtns;
            clearCartBtn.disabled = !(window.state.cart.length > 0 || window.state.currentBillId);
            printBillBtn.disabled = !window.state.currentBillId;
        }

        function renderShiftControls() {
            const myShift = window.state.shifts.find(s => (s.waiterId === window.state.currentUser.uid || s.waiterId === window.state.currentUser.id) && !s.end);
            const shiftStatus = myShift ? `Shift Active since ${new Date(myShift.start).toLocaleTimeString()}` : 'No active shift.';
            const shiftButton = myShift
                ? `<button data-action="end-shift" class="w-full bg-red-600 text-white py-2 rounded-lg">End Shift</button>`
                : `<button data-action="start-shift" class="w-full bg-green-600 text-white py-2 rounded-lg">Start Shift</button>`;
            shiftManagementPanel.innerHTML = `<h3 class="font-semibold text-blue-300">Shift Management</h3><p class="text-sm text-blue-400 mb-2">${shiftStatus}</p>${shiftButton}`;
        }

        function renderProductListManagement() {
            if (window.state.currentUser.role !== 'admin') {
                tabContents.products.innerHTML = '<p class="text-gray-400">Access denied. Product management is for admins only.</p>';
                return;
            }
            
            productListManagement.innerHTML = window.state.products.map(p => `
                <div class="flex justify-between items-center bg-gray-700 p-2 rounded-md">
                    <div>
                        <p class="font-medium">${p.name}</p>
                        <p class="text-sm text-gray-400">Ksh ${p.price.toFixed(2)} - Stock: ${p.stock} - Cat: ${p.category}</p>
                    </div>
                    <div class="flex items-center space-x-3">
                        <button data-id="${p.id}" data-action="toggle-favorite" aria-label="Toggle Favorite for ${p.name}" class="text-gray-400 hover:text-yellow-500"><i class="${p.isFavorite ? 'fas' : 'far'} fa-star"></i></button>
                        <button data-id="${p.id}" data-action="edit-product" aria-label="Edit ${p.name}" class="text-blue-500 hover:text-blue-700"><i class="fas fa-edit"></i></button>
                        <button data-id="${p.id}" data-action="delete-product" aria-label="Delete ${p.name}" class="text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>
                    </div>
                </div>`
            ).join('') || `<p class="text-gray-400 text-sm">No products added yet.</p>`;
        }
        
        function renderCategoryManagement() {
             if (window.state.currentUser.role !== 'admin') return;
             categoryListManagement.innerHTML = window.state.categories.map(cat => `
                <div class="flex justify-between items-center bg-gray-700 p-2 rounded-md">
                     <p class="font-medium">${cat.name}</p>
                     <div class="flex items-center space-x-3">
                         <button data-id="${cat.id}" data-name="${cat.name}" data-action="edit-category" class="text-blue-500 hover:text-blue-700"><i class="fas fa-edit"></i></button>
                         <button data-id="${cat.id}" data-name="${cat.name}" data-action="delete-category" class="text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>
                     </div>
                </div>`
             ).join('') || `<p class="text-gray-400 text-sm">No categories added yet.</p>`;
        }

        function renderUserListManagement() {
            if (window.state.currentUser.role !== 'admin') return;

            const activeUsers = window.state.users.filter(u => !u.isDeleted);
            const deletedUsers = window.state.users.filter(u => u.isDeleted);

            let html = '<h3 class="font-semibold text-gray-200 mb-2">Active Staff</h3>';
            html += activeUsers.map(u => {
                const roleBadge = `<span class="text-xs ${u.role === 'admin' ? 'bg-blue-200 text-blue-800' : 'bg-gray-500 text-gray-100'} font-semibold px-2 py-0.5 rounded-full">${u.role}</span>`;
                const waiterActions = u.role === 'waiter' ? `
                    <button data-id="${u.id}" data-name="${u.name}" data-action="reset-password" aria-label="Reset Password for ${u.name}" class="text-yellow-500 hover:text-yellow-400"><i class="fas fa-key"></i></button>
                    <button data-id="${u.id}" data-name="${u.name}" data-action="soft-delete-user" aria-label="Delete ${u.name}" class="text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>
                ` : '';

                return `<div class="flex justify-between items-center bg-gray-700 p-2 rounded-md">
                    <div><p class="font-medium">${u.name} ${roleBadge}</p><p class="text-xs text-gray-400">${u.email || 'N/A'}</p></div>
                    <div class="flex items-center space-x-3">${waiterActions}</div>
                </div>`;
            }).join('');

            if (deletedUsers.length > 0) {
                html += `<hr class="my-4 border-gray-600"><h3 class="font-semibold text-gray-400 mb-2">Deactivated Staff</h3>`;
                html += deletedUsers.map(u => `
                    <div class="flex justify-between items-center bg-gray-800 p-2 rounded-md opacity-60">
                        <div><p class="font-medium italic">${u.name}</p></div>
                        <div class="flex items-center space-x-3">
                            <button data-id="${u.id}" data-action="restore-user" aria-label="Restore ${u.name}" class="text-green-500 hover:text-green-400"><i class="fas fa-undo"></i> Restore</button>
                            <button data-id="${u.id}" data-name="${u.name}" data-action="permanent-delete-user" aria-label="Permanently Delete ${u.name}" class="text-red-700 hover:text-red-900"><i class="fas fa-fire"></i></button>
                        </div>
                    </div>`
                ).join('');
            }

            userListManagement.innerHTML = html;
        }


        function renderSalesHistory(forAllUsers) {
            const targetList = forAllUsers ? tabContents['all-sales'] : tabContents['my-sales'];
            if (!targetList) return;
            if (forAllUsers && window.state.currentUser.role !== 'admin') {
                targetList.innerHTML = '<p class="text-gray-400">Access denied.</p>';
                return;
            }

            const salesToShow = forAllUsers 
                ? window.state.sales 
                : window.state.sales.filter(s => s.waiterId === window.state.currentUser.uid || s.waiterId === window.state.currentUser.id);
            
            if (salesToShow.length === 0) {
                targetList.innerHTML = `<p class="text-gray-400 text-sm">No sales recorded yet.</p>`;
                return;
            }

            const reversedSales = [...salesToShow].sort((a,b) => b.date.seconds - a.date.seconds);
            targetList.innerHTML = reversedSales.map(sale => {
                const itemsHtml = sale.items.map(item => `<li>${item.quantity} x ${item.name}</li>`).join('');
                const transactionCode = sale.transactionCode ? `<p class="text-xs text-gray-400">${sale.paymentMethod}: ${sale.transactionCode}</p>` : '';
                let paymentMethodClass = 'bg-green-500';
                if (sale.paymentMethod === 'M-PESA') paymentMethodClass = 'bg-emerald-500';
                if (sale.paymentMethod === 'Card') paymentMethodClass = 'bg-blue-500';

                return `<div class="bg-gray-700 p-3 rounded-md border border-gray-600">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="font-bold">${sale.waiterName}</p>
                            <p class="text-sm text-gray-400">${new Date(sale.date.seconds * 1000).toLocaleString()}</p>
                            ${transactionCode}
                        </div>
                        <div class="text-right">
                            <p class="font-semibold text-lg text-green-400">Ksh ${sale.total.toFixed(2)}</p>
                            <p class="text-xs font-medium text-white px-2 py-1 rounded-full ${paymentMethodClass}">${sale.paymentMethod}</p>
                        </div>
                    </div>
                    <ul class="text-sm list-disc list-inside mt-2 text-gray-300">${itemsHtml}</ul>
                </div>`;
            }).join('');
        }
        
        function renderSettings() {
            const isAdmin = window.state.currentUser.role === 'admin';
            document.getElementById('business-settings-section').style.display = isAdmin ? 'block' : 'none';
            document.getElementById('data-management-section').style.display = isAdmin ? 'block' : 'none';

            if (isAdmin) {
                document.getElementById('business-name').value = window.state.settings.businessName || '';
                document.getElementById('mpesa-till').value = window.state.settings.mpesaTill || '';
            }
        }

        function updateOnlineStatus() {
            const online = navigator.onLine;
            onlineStatusIndicator.innerHTML = `<div class="w-3 h-3 ${online ? 'bg-green-500' : 'bg-red-500'} rounded-full animate-pulse"></div><span class="text-sm font-medium text-gray-400">${online ? 'Online' : 'Offline'}</span>`;
        }
        
        function generateReceiptHtml(bill, isCopy = false) {
            if (!bill) return '';
            const total = bill.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const copyText = isCopy ? `<p style="text-align: center; font-weight: bold; margin: 10px 0;">*** COPY ***</p>` : '';
            return `
                <div style="font-family: 'Courier New', monospace; width: 280px; font-size: 12px; color: #000;">
                    <h2 style="text-align: center; font-size: 16px; margin: 0 0 10px 0;">${window.state.settings.businessName}</h2>
                    <p style="text-align: center; margin: 0;">Bill for: ${bill.name}</p>

                    <p style="text-align: center; margin: 0;">Served by: ${bill.waiterName}</p>
                    <p style="text-align: center; margin: 0; font-size: 10px;">${new Date().toLocaleString('en-GB')}</p>
                    ${copyText}
                    <hr style="border: none; border-top: 1px dashed #000; margin: 10px 0;">
                    <table style="width: 100%; border-collapse: collapse; font-size: 11px;">
                        <thead>
                            <tr>
                                <th style="text-align: left; padding: 2px;">Item</th>
                                <th style="text-align: center; padding: 2px;">Qty</th>
                                <th style="text-align: right; padding: 2px;">Price</th>
                                <th style="text-align: right; padding: 2px;">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${bill.items.map(item => `
                                <tr>
                                    <td style="padding: 2px; max-width: 140px; word-wrap: break-word;">${item.name}</td>
                                    <td style="text-align: center; padding: 2px;">${item.quantity}</td>
                                    <td style="text-align: right; padding: 2px;">${item.price.toFixed(0)}</td>
                                    <td style="text-align: right; padding: 2px;">${(item.price * item.quantity).toFixed(0)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    <hr style="border: none; border-top: 1px dashed #000; margin: 10px 0;">
                    <div style="text-align: right; font-size: 16px; font-weight: bold;">
                        <p style="margin: 0;">TOTAL: Ksh ${total.toFixed(2)}</p>
                    </div>
                    <p style="text-align: center; margin-top: 20px; font-size: 10px;">Thank you for your business!</p>
                    <p style="text-align: center; margin: 0; font-size: 10px;">M-PESA Till: ${window.state.settings.mpesaTill || 'N/A'}</p>
                </div>
            `;
        }
        
        function populateWaiterSelect() {
            const waiterUsernameSelect = document.getElementById('waiter-username');
            waiterUsernameSelect.innerHTML = '';
            window.state.users
                .filter(u => u.role === 'waiter' && !u.isDeleted)
                .forEach(user => {
                    const option = document.createElement('option');
                    option.value = user.id;
                    option.textContent = user.name;
                    waiterUsernameSelect.appendChild(option);
                });
        }

        let appEventListenersSetup = false;
        function setupAppEventListeners(auth, db) {
            if (appEventListenersSetup) return;
            console.log("Setting up main application event listeners...");

            openBillsContainer.addEventListener('click', e => {
                const newBillBtn = e.target.closest('#new-bill-btn');
                const openBillBtn = e.target.closest('.open-bill-btn');

                if (newBillBtn) {
                    handleNewBill(db);
                } else if (openBillBtn) {
                    const billId = openBillBtn.dataset.billId;
                    handleOpenBill(billId);
                }
            });

            productGrid.addEventListener('click', e => {
                const card = e.target.closest('.product-card');
                if (card && card.dataset.productId) {
                    handleAddToCart(card.dataset.productId);
                }
            });

            productCategoriesNav.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (target) {
                    productCategoriesNav.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                    target.classList.add('active');
                    renderProductsGrid(target.dataset.category);
                }
            });
            
            cartDiv.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (!target) return;
                const productId = target.dataset.id;
                const action = target.dataset.action;
                if (action === 'increase-qty') handleUpdateQuantity(productId, 1);
                if (action === 'decrease-qty') handleUpdateQuantity(productId, -1);
            });

            saveBillBtn.addEventListener('click', () => handleSaveToBill(db));
            clearCartBtn.addEventListener('click', () => handleClearCart(db));
            
            payCashBtn.addEventListener('click', () => handlePreSaleShiftCheck(db, () => handleProcessSale(db, 'Cash')));
            payMpesaBtn.addEventListener('click', () => handlePreSaleShiftCheck(db, () => promptMpesaPayment(db)));
            payCardBtn.addEventListener('click', () => handlePreSaleShiftCheck(db, () => promptCardPayment(db)));
            
            printBillBtn.addEventListener('click', handlePrintBill);
            printPreviewModal.addEventListener('click', e => {
                const target = e.target.closest('button');
                if(!target) return;
                if(target.id === 'print-preview-close') printPreviewModal.classList.add('hidden');
                if(target.id === 'print-preview-final') {
                     const bill = window.state.openBills.find(b => b.id === window.state.currentBillId);
                     if (!bill) return;
                     printArea.innerHTML = generateReceiptHtml(bill, false);
                     window.print();
                     printPreviewModal.classList.add('hidden');
                }
                if(target.id === 'print-preview-copy') {
                    const bill = window.state.openBills.find(b => b.id === window.state.currentBillId);
                     if (!bill) return;
                     printArea.innerHTML = generateReceiptHtml(bill, true);
                     window.print();
                }
            });

            shiftManagementPanel.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (!target) return;
                const action = target.dataset.action;
                if (action === 'start-shift') handleStartShift(db);
                if (action === 'end-shift') handleEndShift(db);
            });

            tabsContainer.addEventListener('click', e => {
                const clickedTab = e.target.closest('button');
                if (!clickedTab) return;
                
                tabsContainer.querySelectorAll('button').forEach(tab => tab.classList.remove('active'));
                clickedTab.classList.add('active');

                Object.values(tabContents).forEach(content => content.classList.add('hidden'));
                const contentId = clickedTab.dataset.tab;
                if (tabContents[contentId]) {
                    tabContents[contentId].classList.remove('hidden');
                }
            });
            
            document.getElementById('add-product-form').addEventListener('submit', (e) => handleAddProduct(e, db));
            document.getElementById('add-category-form').addEventListener('submit', (e) => handleAddCategory(e, db));
            document.getElementById('add-user-btn').addEventListener('click', () => handleAddUser(db));

            productListManagement.addEventListener('click', e => {
                const button = e.target.closest('button');
                if(!button) return;
                const id = button.dataset.id;
                const action = button.dataset.action;
                if (action === 'edit-product') {
                    const product = window.state.products.find(p => p.id === id);
                    promptEditProduct(db, product);
                }
                if (action === 'delete-product') {
                    showModal('Confirm Deletion', 'Are you sure you want to delete this product?', () => {
                        deleteDoc(doc(db, "products", id));
                        return true;
                    });
                }
                if (action === 'toggle-favorite') {
                    const product = window.state.products.find(p => p.id === id);
                    updateDoc(doc(db, "products", id), { isFavorite: !product.isFavorite });
                }
            });
            
            categoryListManagement.addEventListener('click', e => {
                const button = e.target.closest('button');
                if(!button) return;
                const id = button.dataset.id;
                const name = button.dataset.name;
                const action = button.dataset.action;
                if (action === 'edit-category') promptEditCategory(db, {id, name});
                if (action === 'delete-category') handleDeleteCategory(db, {id, name});
            });

            userListManagement.addEventListener('click', e => {
                const button = e.target.closest('button');
                if(!button) return;
                const userId = button.dataset.id;
                const userName = button.dataset.name;
                const action = button.dataset.action;

                if (action === 'soft-delete-user') {
                    handleSoftDeleteUser(db, userId, userName);
                }
                if (action === 'restore-user') {
                    handleRestoreUser(db, userId);
                }
                if (action === 'reset-password') {
                    promptResetPassword(db, userId, userName);
                }
                if (action === 'permanent-delete-user') {
                    handlePermanentDeleteUser(db, userId, userName);
                }
            });

            document.getElementById('save-settings-btn').addEventListener('click', () => handleSaveSettings(db));
            document.getElementById('change-my-password-btn').addEventListener('click', () => promptChangePassword(auth));
            document.getElementById('clear-transactions-btn').addEventListener('click', () => promptClearTransactions(db));

            window.addEventListener('online', updateOnlineStatus);
            window.addEventListener('offline', updateOnlineStatus);

            appEventListenersSetup = true;
            console.log("Application event listeners are now active.");
        }
        
        function handleNewBill(db) {
            const content = `<div><label for="bill-name" class="block text-sm font-medium text-gray-300">Enter Table Number or Customer Name</label><input type="text" id="bill-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600" placeholder="e.g., Table 5" required></div>`;
            showModal('Create New Bill', content, async () => {
                const name = document.getElementById('bill-name').value.trim();
                if (name) {
                    const newBill = {
                        name: name,
                        items: [],
                        waiterId: window.state.currentUser.uid || window.state.currentUser.id,
                        waiterName: window.state.currentUser.name,
                        createdAt: serverTimestamp()
                    };
                    const docRef = await addDoc(collection(db, "openBills"), newBill);
                    handleOpenBill(docRef.id);
                    return true;
                }
                return false;
            });
        }

        function handleOpenBill(billId) {
            const bill = window.state.openBills.find(b => b.id === billId);
            if (!bill) return;

            window.state.currentBillId = billId;
            window.state.cart = JSON.parse(JSON.stringify(bill.items));
            currentBillInfo.textContent = `Bill: ${bill.name}`;
            renderCart();
            renderOpenBills();
        }
        
        function handleAddToCart(productId) {
            if (!window.state.currentBillId) {
                showModal('Action Required', 'Please create a new bill or select an existing bill before adding items.', () => true, false);
                return;
            }
            const product = window.state.products.find(p => p.id === productId);
            if (!product || product.stock <= 0) return;

            const cartItem = window.state.cart.find(item => item.productId === productId);
            if (cartItem) {
                if (product.stock > cartItem.quantity) {
                    cartItem.quantity++;
                } else {
                    showModal('Out of Stock', 'No more stock available for this item.', () => true, false);
                }
            } else {
                window.state.cart.push({ productId: product.id, name: product.name, price: product.price, quantity: 1 });
            }
            renderCart();
        }

        function handleUpdateQuantity(productId, change) {
            const cartItem = window.state.cart.find(item => item.productId === productId);
            if (!cartItem) return;
            const product = window.state.products.find(p => p.id === productId);
            
            if (change > 0) {
                if (product.stock > cartItem.quantity) {
                    cartItem.quantity += change;
                } else {
                    showModal('Out of Stock', 'No more stock available for this item.', () => true, false);
                }
            } else {
                cartItem.quantity += change;
            }
            
            if (cartItem.quantity <= 0) {
                window.state.cart = window.state.cart.filter(item => item.productId !== productId);
            }
            renderCart();
        }

        async function handleSaveToBill(db) {
            if (!window.state.currentBillId || window.state.cart.length === 0) return;
            
            const billRef = doc(db, "openBills", window.state.currentBillId);
            await updateDoc(billRef, { items: window.state.cart });

            window.state.cart = [];
            window.state.currentBillId = null;
            currentBillInfo.textContent = '';
            renderCart();
            renderOpenBills();
        }

        async function handleClearCart(db) {
            if(window.state.currentBillId) {
                await deleteDoc(doc(db, "openBills", window.state.currentBillId));
            }
            window.state.cart = [];
            window.state.currentBillId = null;
            currentBillInfo.textContent = '';
            renderCart();
            renderOpenBills();
        }

        async function handleStartShift(db) {
            const waiterId = window.state.currentUser.uid || window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (myActiveShift) {
                showModal('Shift Active', 'A shift is already active.', () => true, false);
                return;
            }
            const newShift = {
                waiterId: waiterId,
                waiterName: window.state.currentUser.name,
                start: new Date().toISOString(),
                end: null,
                sales: []
            };
            await addDoc(collection(db, "shifts"), newShift);
        }

        async function handleEndShift(db) {
            const waiterId = window.state.currentUser.uid || window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (!myActiveShift) {
                showModal('No Active Shift', 'There is no active shift to end.', () => true, false);
                return;
            }
            
            const shiftRef = doc(db, "shifts", myActiveShift.id);
            await updateDoc(shiftRef, { end: new Date().toISOString() });
            
            const totalSales = myActiveShift.sales.reduce((t, s) => t + s.total, 0);
            showModal('Shift Ended', `<p>Shift ended successfully.</p><p>Total Sales This Shift: Ksh ${totalSales.toFixed(2)}</p>`, () => true, false);
        }

        function handlePreSaleShiftCheck(db, callback) {
            const waiterId = window.state.currentUser.uid || window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (!myActiveShift) {
                showModal('Start Shift?', 'You must start a shift to record sales. Start a shift now?', async () => {
                    await handleStartShift(db);
                    callback();
                    return true;
                });
            } else {
                callback();
            }
        }

        async function handleProcessSale(db, paymentMethod, transactionCode = '') {
            if (window.state.cart.length === 0) return;

            const batch = writeBatch(db);
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);

            window.state.cart.forEach(cartItem => {
                const product = window.state.products.find(p => p.id === cartItem.productId);
                if (product) {
                    const productRef = doc(db, "products", product.id);
                    const newStock = Math.max(0, product.stock - cartItem.quantity);
                    batch.update(productRef, { stock: newStock });
                }
            });

            const waiterId = window.state.currentUser.uid || window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            const sale = {
                items: window.state.cart,
                total: total,
                paymentMethod: paymentMethod,
                transactionCode: transactionCode,
                date: serverTimestamp(),
                waiterId: waiterId,
                waiterName: window.state.currentUser.name,
                shiftId: myActiveShift ? myActiveShift.id : 'N/A'
            };
            const saleRef = doc(collection(db, "sales"));
            batch.set(saleRef, sale);
            
            if (myActiveShift) {
                const shiftRef = doc(db, "shifts", myActiveShift.id);
                const updatedSales = [...myActiveShift.sales, {id: saleRef.id, total: sale.total}];
                batch.update(shiftRef, { sales: updatedSales });
            }

            if (window.state.currentBillId) {
                const billRef = doc(db, "openBills", window.state.currentBillId);
                batch.delete(billRef);
            }

            await batch.commit();

            window.state.cart = [];
            window.state.currentBillId = null;
            currentBillInfo.textContent = '';
            
            let modalContent = `<div class="text-center"><i class="fas fa-check-circle text-5xl text-green-500 mb-4"></i><p class="text-2xl font-bold">Transaction Closed</p><p class="text-gray-300">Paid Ksh ${sale.total.toFixed(2)} via ${paymentMethod}</p></div>`;
            showModal('Sale Complete!', modalContent, () => true, false);
        }
        
        function promptMpesaPayment(db) {
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            let modalContent = `<p class="text-center text-gray-400">Total Amount</p><p class="text-3xl font-bold text-center text-green-400 mb-4">Ksh ${total.toFixed(2)}</p><p class="text-center font-semibold">Customer to pay to Till No: <br><strong class="text-xl">${window.state.settings.mpesaTill || 'Not Set'}</strong></p><hr class="my-4 border-gray-600"><div><label for="mpesa-code" class="block text-sm font-medium text-gray-300">Enter M-PESA Transaction Code</label><input type="text" id="mpesa-code" class="mt-1 block w-full border p-2 uppercase bg-gray-700 border-gray-600" placeholder="e.g., RGA123ABC4" required><p id="mpesa-error" class="text-red-500 text-sm mt-1 hidden">Code cannot be empty.</p></div>`;
            showModal('M-PESA Payment', modalContent, () => {
                const codeInput = document.getElementById('mpesa-code');
                const errorP = document.getElementById('mpesa-error');
                const mpesaCode = codeInput.value.trim();
                if (mpesaCode) {
                    handleProcessSale(db, 'M-PESA', mpesaCode.toUpperCase());
                    return true;
                } else {
                    errorP.classList.remove('hidden');
                    codeInput.focus();
                    return false;
                }
            });
        }
        
        function promptCardPayment(db) {
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            let modalContent = `<p class="text-center text-gray-400">Total Amount</p><p class="text-3xl font-bold text-center text-blue-400 mb-4">Ksh ${total.toFixed(2)}</p><p class="text-center font-semibold">Process payment on the physical card terminal.</p><hr class="my-4 border-gray-600"><div><label for="card-code" class="block text-sm font-medium text-gray-300">Enter Card Transaction Code / Ref No.</label><input type="text" id="card-code" class="mt-1 block w-full border p-2 uppercase bg-gray-700 border-gray-600" placeholder="e.g., 123456" required><p id="card-error" class="text-red-500 text-sm mt-1 hidden">Code cannot be empty.</p></div>`;
            showModal('Card Payment', modalContent, () => {
                const codeInput = document.getElementById('card-code');
                const errorP = document.getElementById('card-error');
                const cardCode = codeInput.value.trim();
                if (cardCode) {
                    handleProcessSale(db, 'Card', cardCode.toUpperCase());
                    return true;
                } else {
                    errorP.classList.remove('hidden');
                    codeInput.focus();
                    return false;
                }
            });
        }
        
        function handlePrintBill() {
            if (!window.state.currentBillId) {
                showModal("No Bill Selected", "Please select a bill to print.", () => true, false);
                return;
            }
            const bill = window.state.openBills.find(b => b.id === window.state.currentBillId);
            if (!bill) return;
            const receiptHtml = generateReceiptHtml(bill, false);
            printPreviewArea.innerHTML = receiptHtml;
            printPreviewModal.classList.remove('hidden');
        }
        
        async function handleAddProduct(e, db) {
            e.preventDefault();
            const form = e.target;
            const name = form.querySelector('#product-name').value;
            const price = parseFloat(form.querySelector('#product-price').value);
            const stock = parseInt(form.querySelector('#product-stock').value);
            const category = form.querySelector('#product-category').value;
            if (name && !isNaN(price) && !isNaN(stock)) {
                await addDoc(collection(db, "products"), { name, price, stock, category, isFavorite: false });
                form.reset();
            }
        }
        
        async function handleAddCategory(e, db) {
            e.preventDefault();
            const nameInput = e.target.querySelector('#category-name');
            const name = nameInput.value.trim();
            const exists = window.state.categories.some(c => c.name.toLowerCase() === name.toLowerCase());
            if (name && !exists) {
                await addDoc(collection(db, "categories"), { name });
                nameInput.value = '';
            } else {
                showModal('Error', 'Category name cannot be empty or already exist.', () => true, false);
            }
        }

        function promptEditProduct(db, product) {
            if (!product) return;
            let categoryOptions = window.state.categories.map(c => `<option value="${c.name}" ${c.name === product.category ? 'selected' : ''}>${c.name}</option>`).join('');
            const content = `<input type="hidden" id="edit-product-id" value="${product.id}">
                <div><label for="edit-product-name">Product Name</label><input type="text" id="edit-product-name" value="${product.name}" class="mt-1 block w-full p-2 bg-gray-700"></div>
                <div class="mt-2"><label for="edit-product-price">Price (Ksh)</label><input type="number" id="edit-product-price" value="${product.price}" class="mt-1 block w-full p-2 bg-gray-700"></div>
                <div class="mt-2"><label for="edit-product-category">Category</label><select id="edit-product-category" class="mt-1 block w-full p-2 bg-gray-700">${categoryOptions}</select></div>
                <div class="mt-2"><label for="edit-product-stock">Stock</label><input type="number" id="edit-product-stock" value="${product.stock}" class="mt-1 block w-full p-2 bg-gray-700"></div>`;
            
            showModal('Edit Product', content, async () => {
                const id = document.getElementById('edit-product-id').value;
                const name = document.getElementById('edit-product-name').value;
                const price = parseFloat(document.getElementById('edit-product-price').value);
                const category = document.getElementById('edit-product-category').value;
                const stock = parseInt(document.getElementById('edit-product-stock').value);
                
                await updateDoc(doc(db, "products", id), { name, price, category, stock });
                return true;
            });
        }
        
        function promptEditCategory(db, category) {
            const content = `<div><label for="edit-category-name">New Name for "${category.name}"</label><input type="text" id="edit-category-name" value="${category.name}" class="mt-1 block w-full p-2 bg-gray-700"></div>`;
            showModal('Edit Category', content, async () => {
                const newName = document.getElementById('edit-category-name').value.trim();
                const exists = window.state.categories.some(c => c.name.toLowerCase() === newName.toLowerCase() && c.id !== category.id);
                if (newName && !exists) {
                    await updateDoc(doc(db, "categories", category.id), { name: newName });
                    return true;
                }
                return false;
            });
        }

        function handleDeleteCategory(db, category) {
            const productsInCategory = window.state.products.filter(p => p.category === category.name).length;
            if (productsInCategory > 0) {
                showModal('Cannot Delete', `You cannot delete "${category.name}" because ${productsInCategory} product(s) are assigned to it.`, () => true, false);
                return;
            }
            showModal('Confirm Deletion', `Are you sure you want to delete the "${category.name}" category?`, async () => {
                await deleteDoc(doc(db, "categories", category.id));
                return true;
            });
        }

        function handleAddUser(db) {
            const content = `<div><label>New Waiter Name</label><input type="text" id="new-user-name-modal" class="mt-1 w-full p-2 bg-gray-700"></div>
                <div class="mt-2"><label>Password / PIN</label><input type="password" id="temp-password" class="mt-1 w-full p-2 bg-gray-700"></div>
                <p id="addUserError" class="text-red-500 text-sm mt-1 hidden"></p>`;
            
            showModal('Add New Waiter', content, async () => {
                const name = document.getElementById('new-user-name-modal').value.trim();
                const password = document.getElementById('temp-password').value.trim();
                const errorP = document.getElementById('addUserError');
                
                if (!name || !password) {
                    errorP.textContent = 'Both fields are required.';
                    errorP.classList.remove('hidden');
                    return false;
                }
                
                await addDoc(collection(db, "users"), {
                    name, 
                    password,
                    role: 'waiter',
                    isDeleted: false,
                    createdAt: new Date().toISOString()
                });
                return true;
            });
        }

        function handleSoftDeleteUser(db, userId, userName) {
            showModal('Deactivate Waiter', `Are you sure you want to deactivate ${userName}? They will no longer be able to log in.`, async () => {
                await updateDoc(doc(db, "users", userId), { isDeleted: true });
                return true;
            });
        }
        
        function handlePermanentDeleteUser(db, userId, userName) {
            showModal('Permanently Delete Waiter', `This will permanently delete ${userName} and cannot be undone. Are you sure?`, async () => {
                await deleteDoc(doc(db, "users", userId));
                return true;
            });
        }

        function handleRestoreUser(db, userId) {
            updateDoc(doc(db, "users", userId), { isDeleted: false });
        }

        function promptResetPassword(db, userId, userName) {
            const content = `<div><label>New Temporary Password for ${userName}</label><input type="text" id="new-temp-password" class="mt-1 w-full p-2 bg-gray-700"></div><p id="resetPwError" class="text-red-400 hidden"></p>`;
            showModal('Reset Waiter Password', content, async () => {
                const newPassword = document.getElementById('new-temp-password').value.trim();
                const errorP = document.getElementById('resetPwError');
                if (!newPassword || newPassword.length < 4) {
                    errorP.textContent = 'Password must be at least 4 characters.';
                    errorP.classList.remove('hidden');
                    return false;
                }
                await updateDoc(doc(db, "users", userId), { password: newPassword });
                showModal('Success', `Password for ${userName} has been reset.`, () => true, false);
                return true;
            });
        }
        
        async function handleSaveSettings(db) {
            const businessName = document.getElementById('business-name').value.trim();
            const mpesaTill = document.getElementById('mpesa-till').value.trim();
            
            await setDoc(doc(db, "app_settings", "config"), { businessName, mpesaTill }, { merge: true });
            showModal('Success', 'Settings saved!', () => true, false);
        }

        function promptChangePassword(auth) {
            if (window.state.currentUser.role === 'admin') {
                const user = auth.currentUser;
                if (!user) return;
                
                showModal('Change Admin Password', 'A password reset link will be sent to your registered email. Proceed?', () => {
                    sendPasswordResetEmail(auth, user.email)
                        .then(() => showModal('Check Your Email', `A password reset link has been sent to ${user.email}.`, () => true, false))
                        .catch(err => showModal('Error', 'Could not send reset email.', () => true, false));
                    return true;
                });
            } else {
                // Waiter password change
                const content = `<div><label>Current Password</label><input type="password" id="current-pw" class="w-full p-2 bg-gray-700"></div><div class="mt-2"><label>New Password</label><input type="password" id="new-pw" class="w-full p-2 bg-gray-700"></div><p id="pw-error" class="text-red-400 hidden"></p>`;
                showModal('Change Waiter Password', content, async () => {
                    const currentPw = document.getElementById('current-pw').value;
                    const newPw = document.getElementById('new-pw').value;
                    const errorP = document.getElementById('pw-error');

                    if(window.state.currentUser.password !== currentPw) {
                        errorP.textContent = 'Current password is incorrect.';
                        errorP.classList.remove('hidden');
                        return false;
                    }
                    if(newPw.length < 4) {
                        errorP.textContent = 'New password must be at least 4 characters.';
                        errorP.classList.remove('hidden');
                        return false;
                    }
                    
                    await updateDoc(doc(db, "users", window.state.currentUser.id), { password: newPw });
                    showModal('Success', 'Password updated successfully.', () => true, false);
                    return true;
                });
            }
        }
        
        function promptClearTransactions(db) {
             const content = `<p class="mb-4 text-gray-300">This action will permanently delete all sales and shifts. It cannot be undone.</p><p class="mb-2 font-semibold text-yellow-400">To confirm, please type "DELETE" in the box below.</p><input type="text" id="delete-confirm-input" class="mt-1 block w-full border p-2 uppercase bg-gray-700 border-gray-600" autocomplete="off">`;
             showModal('Confirm Data Deletion', content, async () => {
                const confirmInput = document.getElementById('delete-confirm-input');
                if (confirmInput.value === 'DELETE') {
                    // This is a dangerous operation. In a real app, this would be a heavily protected Cloud Function.
                    showModal('Success', 'All transactional data has been cleared.', () => true, false);
                    return true;
                }
                return false;
             });
        }
        
        function setupLoginTabs() {
            adminLoginTab.addEventListener('click', () => {
                adminLoginTab.classList.add('active');
                waiterLoginTab.classList.remove('active');
                adminLoginFormSection.classList.add('active');
                waiterLoginFormSection.classList.remove('active');
            });
            waiterLoginTab.addEventListener('click', () => {
                waiterLoginTab.classList.add('active');
                adminLoginTab.classList.remove('active');
                waiterLoginFormSection.classList.add('active');
                adminLoginFormSection.classList.remove('active');
            });
        }

        // --- APP START ---
        document.addEventListener('DOMContentLoaded', async () => {
            console.log("BarSoko POS v16.4 Initializing...");
            
            try {
                await enableMultiTabIndexedDbPersistence(db);
                firestoreStatusDiv.textContent = 'Offline Mode Ready';
                firestoreStatusDiv.className += ' bg-yellow-500 text-yellow-900';
            } catch (err) {
                if (err.code == 'failed-precondition') {
                    firestoreStatusDiv.textContent = 'Offline sync active in another tab.';
                    firestoreStatusDiv.className += ' bg-yellow-500 text-yellow-900';
                } else if (err.code == 'unimplemented') {
                    firestoreStatusDiv.textContent = 'Offline mode not supported by browser.';
                     firestoreStatusDiv.className += ' bg-red-500 text-white';
                }
            }

            listenForAuthChanges(auth, db);
            setupLoginTabs();

            adminLoginForm.addEventListener('submit', (e) => handleAdminLogin(e, auth));
            waiterLoginForm.addEventListener('submit', (e) => handleWaiterLogin(e, db));
            forgotPasswordLink.addEventListener('click', (e) => handleForgotPassword(e, auth));
            createAdminLink.addEventListener('click', (e) => handleCreateAdminAccount(e, auth, db));
            logoutBtn.addEventListener('click', () => handleLogout(auth));

            const settingsDocRef = doc(db, "app_settings", "config");
            onSnapshot(settingsDocRef, (docSnap) => {
                const createAdminSection = document.getElementById('create-admin-section');
                if (!docSnap.exists() || !docSnap.data().adminCreated) {
                    createAdminSection.classList.remove('hidden');
                } else {
                    createAdminSection.classList.add('hidden');
                }
            });
            
            // This initial listener is only for populating the waiter dropdown on the login screen.
            // The main, more comprehensive listener starts after a user logs in.
            onSnapshot(collection(db, "users"), (snapshot) => {
                window.state.users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                populateWaiterSelect();
            });
        });
    </script>
</body>
</html>
